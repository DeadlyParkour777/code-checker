services:
  zookeeper:
    image: confluentinc/cp-zookeeper:7.6.1
    container_name: zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000

  kafka:
    image: confluentinc/cp-kafka:7.6.1
    container_name: kafka
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: 'zookeeper:2181'
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_INTERNAL:PLAINTEXT
      KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:9092,PLAINTEXT_INTERNAL://0.0.0.0:29092
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://localhost:9092,PLAINTEXT_INTERNAL://kafka:29092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 100

  kafka-init:
    image: confluentinc/cp-kafka:7.6.1
    container_name: kafka-init
    depends_on:
      - kafka
    command: >
      /bin/sh -c "
        kafka-topics --bootstrap-server kafka:29092 --create --if-not-exists --topic submissions --partitions 1 --replication-factor 1;
        kafka-topics --bootstrap-server kafka:29092 --create --if-not-exists --topic results --partitions 1 --replication-factor 1;
      "
    restart: "no"

  auth-db:
    image: postgres:17-alpine
    container_name: auth-db
    environment:
      POSTGRES_USER: ${DB_USER}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
      POSTGRES_DB: ${DB_NAME}
    ports:
      - "${DB_PORT}:5432"
    volumes:
      - auth-db-data:/var/lib/postgresql/data
    restart: always
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U $$POSTGRES_USER -d $$POSTGRES_DB"]
      interval: 5s
      timeout: 5s
      retries: 5

  migrator:
    build:
      context: ./migrations
      dockerfile: Dockerfile
    env_file:
      - ./.env
    volumes:
      - ./migrations:/migrations
    command: ["/migrate", "up"]
    depends_on:
      auth-db:
        condition: service_healthy
    restart: "no"

  auth_service:
    container_name: auth-service
    build:
      context: .
      dockerfile: Dockerfile
      args:
        SERVICE_DIR: auth_service
    ports:
      - "8001:8001"
    env_file:
      - ./auth_service/.env
    depends_on:
      migrator:
        condition: service_completed_successfully
      kafka-init:
        condition: service_completed_successfully
    restart: on-failure

  submission_service:
    container_name: submission-service
    build:
      context: .
      dockerfile: Dockerfile
      args:
        SERVICE_DIR: submission_service
    ports:
      - "8004:8004"
    env_file:
      - ./submission_service/.env
    depends_on:
      - auth-db
      - kafka-init
      - problem_service
    restart: on-failure

  judge_service:
    container_name: judge-service
    build:
      context: .
      dockerfile: Dockerfile
      args:
        SERVICE_DIR: judge_service
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - ./temp_submissions:/tmp/submissions
    env_file:
      - ./judge_service/.env
    depends_on:
      kafka-init:
        condition: service_completed_successfully
    restart: on-failure

  problem_service:
    container_name: problem-service
    build:
      context: .
      dockerfile: Dockerfile
      args:
        SERVICE_DIR: problem_service
    ports:
      - "8002:8002"
    env_file:
      - ./problem_service/.env
    depends_on:
      - migrator
      - kafka-init
    restart: on-failure

  redis:
    image: redis:7-alpine
    container_name: redis
    restart: always
    ports:
      - "6379:6379"
    volumes:
      - redis-data:/data
      
  result_service:
    container_name: result-service
    build:
      context: .
      dockerfile: Dockerfile
      args:
        SERVICE_DIR: result_service
    ports:
      - "8003:8003"
    env_file:
      - ./result_service/.env
    depends_on:
      - migrator
      - kafka-init
      - redis
    restart: on-failure

  gateway:
    container_name: gateway
    build:
      context: .
      dockerfile: Dockerfile
      args:
        SERVICE_DIR: gateway
    ports:
      - "8000:8000"
    env_file:
      - ./gateway/.env
    depends_on:
      auth_service: { condition: service_started }
      problem_service: { condition: service_started }
      submission_service: { condition: service_started }
      result_service: { condition: service_started }
    restart: on-failure

volumes:
  auth-db-data:
  redis-data: