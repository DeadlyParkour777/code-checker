// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v6.32.0
// source: submission.proto

package submission

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	SubmissionService_CreateSubmission_FullMethodName = "/submission.SubmissionService/CreateSubmission"
)

// SubmissionServiceClient is the client API for SubmissionService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SubmissionServiceClient interface {
	CreateSubmission(ctx context.Context, opts ...grpc.CallOption) (grpc.ClientStreamingClient[CreateSubmissionRequest, Submission], error)
}

type submissionServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewSubmissionServiceClient(cc grpc.ClientConnInterface) SubmissionServiceClient {
	return &submissionServiceClient{cc}
}

func (c *submissionServiceClient) CreateSubmission(ctx context.Context, opts ...grpc.CallOption) (grpc.ClientStreamingClient[CreateSubmissionRequest, Submission], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &SubmissionService_ServiceDesc.Streams[0], SubmissionService_CreateSubmission_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[CreateSubmissionRequest, Submission]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type SubmissionService_CreateSubmissionClient = grpc.ClientStreamingClient[CreateSubmissionRequest, Submission]

// SubmissionServiceServer is the server API for SubmissionService service.
// All implementations must embed UnimplementedSubmissionServiceServer
// for forward compatibility.
type SubmissionServiceServer interface {
	CreateSubmission(grpc.ClientStreamingServer[CreateSubmissionRequest, Submission]) error
	mustEmbedUnimplementedSubmissionServiceServer()
}

// UnimplementedSubmissionServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedSubmissionServiceServer struct{}

func (UnimplementedSubmissionServiceServer) CreateSubmission(grpc.ClientStreamingServer[CreateSubmissionRequest, Submission]) error {
	return status.Errorf(codes.Unimplemented, "method CreateSubmission not implemented")
}
func (UnimplementedSubmissionServiceServer) mustEmbedUnimplementedSubmissionServiceServer() {}
func (UnimplementedSubmissionServiceServer) testEmbeddedByValue()                           {}

// UnsafeSubmissionServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SubmissionServiceServer will
// result in compilation errors.
type UnsafeSubmissionServiceServer interface {
	mustEmbedUnimplementedSubmissionServiceServer()
}

func RegisterSubmissionServiceServer(s grpc.ServiceRegistrar, srv SubmissionServiceServer) {
	// If the following call pancis, it indicates UnimplementedSubmissionServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&SubmissionService_ServiceDesc, srv)
}

func _SubmissionService_CreateSubmission_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(SubmissionServiceServer).CreateSubmission(&grpc.GenericServerStream[CreateSubmissionRequest, Submission]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type SubmissionService_CreateSubmissionServer = grpc.ClientStreamingServer[CreateSubmissionRequest, Submission]

// SubmissionService_ServiceDesc is the grpc.ServiceDesc for SubmissionService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SubmissionService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "submission.SubmissionService",
	HandlerType: (*SubmissionServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "CreateSubmission",
			Handler:       _SubmissionService_CreateSubmission_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "submission.proto",
}
